#+TITLE: Interactive HTML Forms in Common Lisp

# * The Problem
#   I like server-side rendering. It doesn't piss off people who have JavaScript
#   disabled. I get to write less overall code. And, all the code I write can be
#   in true Common Lisp! But at the same time, I like to make websites that have
#   complex interactivity. The only option for me, then, is to make relatively
#   complex HTML <form>s. What do I mean by complex?
#   + The form contains lists, with buttons to add new items, remove existing
#     items, and reorder items. Other compound data types are not out of the
#     question either.
#   + The form checks the validity of each field (eg, max length, allowed
#     characters) and prints error messages when validation fails.
#   My main use case for these forms is to represent and update a large Lisp
#   object (which might be stored in memory, in a database, or anywhere). On
#   initial page load, the form fields are automatically filled out with the
#   existing contents of the object. When the form is submitted, the object is
#   updated based on the user's input.
# ** Idea 1: The PHP way
# ** Idea 2: "Forumla"
# ** Idea 3: Pseudo-events
#    Late at night, I thought back to the most common mistake that beginners make
#    when designing an HTML form: Verifying its validity in JavaScript. People
#    usually make this mistake before they have a strong understanding of the
#    client-server model of the web, so they don't understand that JavaScript can
#    be tampered with to disable the form validation.

#    My revelation though, came when thinking about /why/ beginners make this
#    mistake. Why is it many people's first instinct to verify forms on the
#    client side rather than the server? Because it's /easier/. The JavaScript
#    APIs for validating and modifying forms are a million times easier to use
#    than the two form handling ideas I described above. Verifying a form in
#    JavaScript is as simple as this:

#    #+BEGIN_SRC html
#    <input type="text" value="initial content" onchange="if (this.value.length > 20) this.value = this.value.slice(0,20)">
#    #+END_SRC
   
#    (though HTML5 provides attributes that actually would allow you to enforce
#    the length of the field without any JS at all).

#    After thinking this, I wanted to build a /pseudo-event-based form framework/
#    that makes verifying a form on the backend as easy as verifying a form on the
#    frontend. Here's a translation of the above input into what's possible with
#    Formula:
   
#    #+BEGIN_SRC lisp
#      (defformula max-length-input val (len)
#        (let ((err))
#          (render
#           (list
#            (when err
#              `(span (class "error") err))
#            (input-text val
#                        :onsubmit (lambda (new-val)
#                                    (if (> (length new-val) len)
#                                        (setf err (format nil "Max length: ~a" len))
#                                        (setf val new-val))))))))
#    #+END_SRC
   
#    ~val~ is a symbolic macro pointing to 
   
#    How can this possibly work, on the server side?
#    1. The ~with-formula~ body is evaluated. When an event handler is
#       encountered, it is evaluated if appropriate. The output HTML of this run
#       is discarded. The "value" of the form may have been updated.
#    2. The ~with-formula~ body is evaluated again, using the updated value from
#       the last run. This time, event handlers are ignored and the output HTML is
#       recorded.
   
#    There are two rules:
#    1. No side effects in ~render~ except in event handlers. (The body of
#       ~render~ is evaluated multiple times).
#    2. Event handlers do not "temporarily" add new fields. Put differently, the
#       value passed in must fully determine the fields present in the HTML
#       output.
      
#    The last restriction could probably be eased with a continuations library,
#    such as the one used in Weblocks, but keeping track of the environment across
#    multiple HTTP requests is a whole bag of worms I'm not going to get into.
   
#    Composition is trivial:
   
#    #+BEGIN_SRC lisp
#      (defvar *length-40-input* (max-length-input 40))

#      (defmacro full-name (val)
#        `(formula
#          (render
#           `(div ()
#                 "Please enter your first and last names:"
#                 ,()
#                 ,(max-length-input (cdr val) 40)))))
#    #+END_SRC
   
#    Defining a "base" element, namely ~input-text~:

#    #+BEGIN_SRC lisp
#      (defformula-raw input-text (val name-var post-alist &key onsubmit)
#        ;; the first form generates the output HTML from val and name-var.
#        ;; post-alist is not necessarily bound.
#        `((input (type "text" name ,(incf name-var) value ,val)))
#        ;; the second form evaluates event handlers. All lambda-list entries are
#        ;; bound.
#        (when-let ((new-val (getf post-alist (incf name-var))))
#          (funcall onsubmit new-val)))
#    #+END_SRC
   
#    Now, let's define a list, where each item can be an arbitrary formula:
   
#    #+BEGIN_SRC lisp
#      (defmacro deflistformula (name subformula)
#        (with-gensyms (val-var it-var)
#          `(defformula ,name ,val-var
#             (render
#              (loop for ,it-var in ,val-var
#                 append (,subformula))))))
#    #+END_SRC
   
#    #+BEGIN_SRC lisp
#      (defformify lengthed-field (val max-length)
#        (let ((err))
#          (with-formify
#              `(div ()
#                    ,(when err
#                       `(span (class "error") ,err))
#                    ,(f/child :main
#                              (text-field val (lambda (new-val)
#                                                (if (<= (length new-val) max-length)
#                                                    (setf val new-val)
#                                                    (setf err "Too long!")))))))))
#    #+END_SRC
   
#    #+BEGIN_SRC lisp
#      (defformify list-field ())
#    #+END_SRC
# * The big problems
# ** Order of event execution
#    Barely a problem, since we discovered that order is well-defined intuitively.

#    The events should be handled in either the order specified in the child
#    creation statement, the default order specified in the formifier itself, then
#    in the order the child formifiers were instantiated.G
# ** Sub-formifier state
#    Each formifier instantiates other formifiers. Sometimes, after submission, it
#    reorders existing formifiers, adds additional formifiers, or replaces a
#    formifier with another. In these cases, it's not obvious which new formifier
#    corresponds to each old formifier. The two possible solutions are requiring
#    the user to create formifiers outside of the render body, or providing a
#    unique id to each formifier so that if the user attempts to instantiate a
#    formifier with an id that was already used, the existing formifier is used.
#    The downside of this last technique is that, for example, replacing a
#    formifier in-place with a different formifier requires a different id.
   
#    Ids can be automatically generated much of the time: For child-data
#    formifiers, the data passed in (tested via eql), and for formifiers without
#    data, as an increasing integer. This works for, for example, shuffling a
#    list: If you shuffle ~val~, the list elements are still ~eql~ to the list
#    elements at the original position, so if the id is ~val~, the correct
#    formifier will be chosen for each one.
# *** Smart ID generation
#     When the data being passed in has meaningful reference equality (not number,
#     character, or symbol), we use that as the ID. Additionally, if the
#     subconformlet changes the object, we store an edge from the new value to the
#     old value to keep track of changing values.
    
#     When using smart ID generation, it's safe to use any symbol as custom IDs
#     for specific fields, since all other IDs will either be
#     reference-equality-able (not symbols) or they will be gensyms (when doing
#     the order thing).
# *** Wrappers
#     For a list:

#     #+BEGIN_SRC lisp
#       (defconformlet safe-list (subconformlet default-item) val
#         ;; wrap each item with cons
#         (let ((wrapped-val (mapcar #'list val)))
#           (with-conform ()
#             `((div ("list")
#                    ,(loop for item in wrapped-val
#                        collect `(div (class "list-item")
#                                      (conformlet subconformlet
#                                                  ;; data is the correct data, id has
#                                                  ;; meaningful reference equality.
#                                                  :data (car item) :id item)))
#                    ,(conformlet (button-field "Add New")
#                                 :id :add
#                                 :onclick (appendf wrapped-val (list default-item)))
#                    ,(conformlet (button-field "Shuffle")
#                                 :id :shuffle
#                                 :onclick (setf wrapped-val (shuffle wrapped-val)))))
#             ;; unwrap each item
#             (setf val (mapcar #'car wrapped-val)))))
#     #+END_SRC
# ** Passing formifiers as arguments
#    Shouldn't be a huge problem, although it might be necessary to make the
#    syntax more unwieldy in one place or another.
   
#    The "configurator" (toplevel function) takes whatever arguments the user
#    wants.

#    The "instantiator" (returned from the configurator) does not necessarily need
#    any arguments, but a data conformlet will take as arguments a) the data and
#    b) writer function to update the data.
   
#    An instantiated formifier must expose two methods:
#    + render: Called with an iterator which, when called, returns the next field
#      name.
#    + handle-events: Called with an iterator, which, when called, returns the
#      next post value.
# ** Parallel Structure: events vs updating the data
#    Why should the lowest-level text fields use an ~:onsubmit~ while the
#    higher-level formifiers update the ~val~ instead? We can ditch events and
#    just have everything update val. But then all formifiers are required to be
#    associated with data, and we can't just have a button with onclick, for
#    example. Alternately, everything can be events, and everything just passes
#    data up through onsubmit listeners. When do you call it, though? Do you
#    ~prog1~, returning the html and then calling the event handler afterwards? Or
#    a second form argument to ~defformify~ that is exclusively for calling
#    handlers?
   
#    Solution: Formifiers always call their onsubmit, and parents always register
#    it. But, "data formifiers" implicitly call onsubmit with ~val~ after all
#    other children event handlers have fired, and when the parent instantiates a
#    child using a "child data" statement, an automatic onsubmit handler is
#    generated that updates ~val~ with the argument passed to the event handler.
#    In this way, both children and parents can choose either a setf or
#    event-based way to pass around data interoperably.

* Conform: An improvement on Formlets
   A Common Lisp library for constructing interactive, composable HTML forms,
   entirely on the server-side; no JavaScript is necessary.

   + Interactive: The way a "conformlet" is rendered may change depending on the user's actions. For
     example, a resizeable list with "add" and "remove" buttons is possible. Each element of the
     list can contain more form fields! Form field validation also falls under the banner of
     interactivity.
   + Composable: Parts of a form can be re-used. For example, there might be a datepicker form
     element that you will want to include in multiple places throughout a form. "Higher-order"
     parts of a form are also possible, for example, a resizeable list of arbitrary sub-conformlets.

   The most well-known solution to server-side form composability, was presented in a 2008 paper,
   [[https://links-lang.org/papers/formlets-essence.pdf][The Essence of Form Abstraction]]. Formlets, the name of the solution presented in that paper, have
   since been implemented in many programming languages, including [[https://docs.racket-lang.org/web-server/formlets.html][Racket]] and [[https://github.com/Inaimathi/formlets][Common Lisp]]. Formlets
   achieve composability, but not interactivity. It's impossible to define a "list" formlet that
   contains a varying number of child formlets based on which buttons the user clicks.

   Conform still uses a formlet-like design, so we credit the paper's authors by
   naming each composable form component a "conformlet".
   
   Conform is optimized for making forms that represent a persistent server-side object, rather than
   forms you prepare and then submit once. For instance, Conform would be a great choice for:
   + An "edit profile" page.
   + A page editor for a CMS (Content Management System).
   
   Conform is not tightly coupled to any web server. However, all built-in conformlets, and all the
   examples here, are tied to a certain HTML generator: [[https://gist.github.com/markasoftware/ab357f1b967b3f656d026e33fec3bc0e][html->string]]. You may find it helpful to
   read the html->string documentation before reading the examples. To use any other HTML generator
   you would have to reimplement all built-in conformlets, but wouldn't have to mess with the
   Conform framework itself.
** Installation
   Conform will be available on Quicklisp soon, hopefully. Until then, just put the project
   directory into your local Quicklisp directory (eg, ~\~/quicklisp/local-projects/~), then run
   ~(ql:quickload :conform)~
** Running the examples
   Load the ~conform/examples~ system, then run ~(conform/examples:start 4321)~ to start a
   Hunchentoot server on http://localhost:4321 with a few Conform examples.
** Aside: Place utilities
   Conform includes two macros, ~place~ and ~with-places~, that simplify passing a mutable object as
   an argument to a function. ~(place (car \*my-list\*))~ will expand into something to the effect
   of ~(cons (lambda () (car \*my-list\*)) (lambda (new-val) (rplaca \*my-list\* new-val)))~, ie, a
   cons cell containing a reader and writer for the given place, respectively. ~(with-places)~ can
   then be used to take a result of ~(place)~ and bind it to what seems a normal, ~setf~-able variable:

   #+BEGIN_SRC lisp
     (let ((foo (place (car *my-list*))))
       (with-places (foo)
         (incf foo)))
     ;; equivalent to (incf (car *my-list*))
   #+END_SRC
   
   This is used in Conform to simplify passing part of a data structure to a subconformlet. For
   example, in an edit profile conformlet, you might want to pass the user's first name to the
   ~string-field~ conformlet, allowing the ~string-field~ to both read and update the first name.
   This could be achieved by passing ~(place (slot-value *profile* 'first-name))~ to ~string-field~,
   for example.
** Simple conformlets
   Before we can talk about the juicy interactive conformlets, we have to
   discuss how to make a simple conformlet. Here's one:

   #+BEGIN_SRC lisp
     (defun full-name (val)
       "val should be of the form (\"first-name\" . \"last-name\")"
       (with-places val
         (conformlet ()
           `(div (class "full-name-field")
                 ,(string-field (place (car val))
                                "First Name")
                 ,(string-field (place (cdr val))
                                "Last Name")))))
   #+END_SRC
   
   First, note that our conformlet is just a function -- there's no ~defconformlet~ or similar.
   Second, ~val~ is passed in as a ~(place)~, as described in the last section, so we can both read
   and write it. Finally, note that there is no special function call required to instantiate a
   sub-conformlet (~string-field~, in this case); we just call it! The ~string-field~ conformlets
   modify the place passed in as a value every time the form is submitted.

   Here's another conformlet: A number with buttons to increase or decrease it by a certain amount.
   
   #+BEGIN_SRC lisp
     (defun onerous-number (val delta)
       (conformlet (:places val)
         `(div (class "onerous-number")
               "The number currently is: " val
               ,(button (lambda () (incf val delta))
                        "Increment")
               ,(button (lambda () (decf val delta))
                        "Decrement"))))
   #+END_SRC
   
   In the ~full-name~ example, we explicitly wrote ~with-places~. In ~onerous-number~, though, we
   provide the ~:places~ argument to ~conformlet~, which is shorthand for the same thing.

   The first argument to each ~button~ is an "Onclick Event Handler", which is called when the
   button is pressed. Remember that Conform does not use JavaScript, so all buttons trigger a form
   submission and page reload.
     
   Here's a "higher-order" conformlet that duplicates a field:

   #+BEGIN_SRC lisp
     (defun duplicator (val subconformlet)
       "Call subconformlet on both cells of val, which should be cons."
       (conformlet (:places val)
         `(div (class "duplicator")
               ,(funcall subconformlet (place (car val)))
               ,(funcall subconformlet (place (cdr val))))))
   #+END_SRC
   
   The subconformlet should be a function that takes, as a single argument, a ~(place)~ output. For
   example, to use ~onerous-number~ with a delta of 4 as the subconformlet:

   #+BEGIN_SRC lisp
     (duplicator (place *my-cons-cell*) (rcurry #'onerous-number 4))
   #+END_SRC
   
   ~curry~ and ~rcurry~ are very common when handling higher-order conformlets.
   
   Recall that ~(place)~ expands into a cons cell of reader and writer. If you don't want the
   sub-conformlet to directly write to place, you can manually specify the reader and writer instead
   of using ~place~ to generate them automatically:
   
   #+BEGIN_SRC lisp
     (defun uppercase-string (val)
       (conformlet (:places val)
         (string-field (cons
                        (lambda ()
                          val)
                        (lambda (new-val)
                          (setf val (string-upcase new-val))))
                       "Enter string:")))
   #+END_SRC
   
   Here, the "reader" always returns val, but the "writer" uppercases the value before setting
   ~val~. To clarify, when a conformlet that uses ~with-places~ runs ~(setf val "foo")~ the writer
   of the place is called.
   
   Conform has separate "render" and "event handling" phases. The "render" phase only generates
   HTML, with no side effects. The "event handling" phase is when the form responds to the POST
   data. In the ~uppercase-string~ conformlet, for example, the writer is called during the event
   handling stage. In the ~onerous-number~ example, the lambdas on the ~button~ conformlets are
   called during event handling, too.
   
   The ~legal-agreements~ conformlet calls a function passed as an argument only when the user has
   checked all of the boxes.

   #+BEGIN_SRC lisp
     (defun legal-agreements (onagree)
       (conformlet ()
         (let ((agreed-tos)
               (agreed-privacy-policy)
               (agreed-forfeit-assets))

           ;; this will be run after all other event handlers have been run.
           (custom-event
            (when (and agreed-tos agreed-privacy-policy agreed-forfeit-assets)
              (funcall onagree)))

           `(div (class "legal-agreements")
                 ,(checkbox-field (place agreed-tos)
                                  "Do you agree to the terms of service?")
                 ,(checkbox-field (place agreed-privacy-policy)
                                  "Do you agree to the privacy policy?")
                 ,(checkbox-field (place agreed-forfeit-assets)
                                  "Do you agree to forfeit all of your assets to EvilCorp LLC?")))))
   #+END_SRC
   
   Pretty cool! This also demonstrates a common pattern: Passing local variables to sub-conformlets,
   then using a ~custom-event~ to process those local variables and conditionally pass something on
   to the parent conformlet (in this case, calling ~onagree~). Here's how the messy
   ~uppercase-string~ from above could be adapted to this pattern:
   
   #+BEGIN_SRC lisp
     (defun uppercase-string-2 (val)
       (conformlet (:places val)
                   (let ((temp val))

                     (custom-event
                      (setf val (string-upcase temp)))

                     (string-field (place temp) "Enter string:"))))
   #+END_SRC
   
   # Sometimes the order that the events handlers of children are called is
   # important. Say I want a field with a "reset" button next to it that restores
   # some default value. The reset button's ~onclick~ handler will reset the field
   # to the default value. The ~onsubmit~ handler on the field itself will store
   # the user's enteredvalue. If ~onclick~ is called before ~onsubmit~, it will be
   # impossible to actually reset the field! Luckily, we can do this:

   # #+BEGIN_SRC lisp
   #   (defun resettable-field (subconformlet default)
   #     (conformlet (:val val)
   #      `(div (class "resettable")
   #            ,(conform (button-field "Reset")
   #                      :onclick (lambda () (setf val default))
   #                      :order 100)
   #            ,(conform subconformlet
   #                      :val val))))
   # #+END_SRC
   
   # The default ~:order~ is zero, so the event handlers on the button field (and
   # any of its descendants, of which there are none) are called after the event
   # handler on the main field.
** Interactive Conformlets
   Here comes the fun part!
   
   #+BEGIN_SRC lisp
     (defun simple-list (val subconformlet default)
       (conformlet (:places val)
        `(div (class "simple-list")
              ,(loop for i from 0 below (length val)
                  collect (let ((k i))
                            (funcall subconformlet (place (nth k val)))))
              ,(conform (button-field "Add New")
                        :onclick (lambda () (appendf val (list default)))))))
   #+END_SRC
   
   Ain't that easy? Note the important binding of ~k~ to ~i~, which is necessary to ensure that the
   current value is captured during each iteration, else all the subconformlets would refer to the
   same ~i~, which would, at the end of iteration, equal ~(length val)~. Here's a more advanced
   list:
   
   #+BEGIN_SRC lisp
     (defun swapcar (cons1 cons2)
       (declare (cons cons1 cons2))
       (let ((temp (car cons1)))
         (rplaca cons1 (car cons2))
         (rplaca cons2 temp)))

     (defun advanced-list (val subconformlet make-default)
       (declare (function subconformlet make-default))
       (conformlet (:places val)
         `(div (class "form-list")
               ,(loop for i from 0 below (length val)
                   collect (let ((k i))      ; capture the value
                             `(div ()
                                   ,(funcall subconformlet (place (nth k val)))

                                   (div ()
                                        ,(button (lambda () (metatilities:delete-item-at val k)) "Delete")
                                        ,(when (> k 0)
                                           (button (lambda ()
                                                     (swapcar (nthcdr (1- k) val)
                                                              (nthcdr k val)))
                                                   "Move up"))
                                        ,(when (< k (1- (length val)))
                                           (button (lambda ()
                                                     (swapcar (nthcdr k val)
                                                              (nthcdr (1+ k) val)))
                                                   "Move down"))))))
               (div (class "pure-controls")
                    ,(button (lambda ()
                               (appendf val (list (funcall make-default))))
                             "Add new")
                    ,(button (lambda ()
                               (setf val (shuffle val)))
                             "Shuffle")
                    ,(button (lambda ()
                               (setf val (nthcdr (ceiling (length val) 2) (shuffle val))))
                             "Thanos")))))
   #+END_SRC
** Rendering a form: ~render-form~
   Once you've defined all the conformlets you need, render the form:
   
   #+BEGIN_SRC lisp
     (html->string
      `(form (method "POST" action "")
             ,(render-form "form_prefix" #'hunchentoot:post-parameter
                           (some-conformlet))
             (button (type "submit") "Submit form")))
   #+END_SRC
   
   The first argument to ~render-form~ is a prefix that will be added to the ~name~ attributes of
   all fields. The next argument is a function that returns the value of a post parameter, given the
   string name of the post parameter. The rest of the arguments are evaluated in an implicit
   ~conformlet~ statement.
** The elephant in the room: Validation
   Every form framework has validation utilities. Even the original formlet
   paper discusses a simple extension to the basic formlet system for it!
   Unfortunately, the most user-friendly form validation doesn't play together
   nicely with interactive forms, so we have to make compromises.

   There are a few different ways to display the results of form validation. One is to display all
   validation failures at the top of the page. Another is to display validation failures right
   alongside the field that failed to validate. The latter approach is problematic in Conform; it
   breaks the important property that conformlets are pure functions of their arguments. Keeping
   track of arbitrary local state for each conformlet is not trivial; each conformlet would need to
   keep track of "which is which" among their children conformlets. For example, if you re-order
   items of a list, you would need to somehow communicate that the conformlets were rearranged, not
   just that the ~val~ was rearranged. React (a JavaScript UI framework) encounters similar issues,
   and even their overengineered solution often requires manual intervention.

   Thus, the limit of Conform's validation is sad stuff like this:

   #+BEGIN_SRC lisp
     (defun verified-string (val verifier error-text label)
       (conformlet (:places val)
         (let ((unverified-val val))

           (custom-event
            (if (funcall verifier unverified-val)
                (setf val unverified-val)
                (push error-text *form-errors*)))

           (string-field (place unverified-val) label))))
   #+END_SRC
   
   You need some top level code to display the errors:

   #+BEGIN_SRC lisp
     ;; render-form dynamically binds *form-errors* to nil for us.
     (render-form "my-prefix" #'hunchentoot:post-parameter
       (conformlet ()
         `(form (method "POST" action "")
                ,(loop for error in *form-errors*
                    collect `(div (class "form-validation-error") ,error))
                (some-other-conformlet))))
   #+END_SRC
   
   I think having only top-level errors is acceptable for a couple reasons:
   + If the form is especially large, people won't have to scroll through it to
     find where they made a mistake -- it's all at the top.
   + JavaScript can be used to perform preliminary client-side validation at the
     point of the error. While the big point of a server-side-only form
     framework is to avoid requiring JavaScript, there's nothing wrong with
     progressively enhancing the webpage with JS.
   + HTML5 supports a lot of form validation, even with JavaScript disabled,
     through attributes such as [[https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#attr-maxlength][maxlength]] and field types such as [[https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input/url][url]], to help
     the user find errors before submitting.
** How it Works
   Conform works in three stages:
   1. First Render stage: The form is rendered using whatever data was present before the user
      submitted. This render should yield the exact same form that was originally served to the
      user. The purpose of the first render stage is to determine which event handlers should be
      registered. The HTML output of this stage is discarded.
   2. Event Handling stage: Now that we know which events exist, they are executed as appropriate.
   3. Second Render stage: Now that the data has been updated by events, the form is re-rendered to
      reflect those changes.
*** Preventing form submission with stale data
    The First Render stage relies on the persistent data not having changed since the user loaded
    the form. This assumption could be broken if the user has multiple tabs open, modifies the data
    in one tab, then submits the form in the other tab. For example, if there's a list present, then
    in one tab the user deletes an item from the list, it's impossible to meaningfully process the
    other form's eventual submission because it contains data about a field that no longer exists.
    
    It is unsafe to process a form submission after the underlying data has been changed, with
    consequences ranging from runtime errors to data corruption. Here's a strategy for detecting
    and preventing unsafe scenarios:

    #+BEGIN_SRC lisp
      (defun change-protect (val mtime-place subconformlet)
        (conformlet (:places (val mtime-place))
                    (let ((new-mtime (get-universal-time)))
                      `(,(string-input (cons (constantly new-mtime)
                                             (lambda (last-mtime)
                                               ;; non-local jump if mtime is not what we expected.
                                               (assert (= last-mtime mtime-place))
                                               (setf mtime-place new-mtime)))
                                       '(type "hidden"))

                         ;; ensure that mtime is processed first
                         (conformlet (:order 1)
                                     ,(funcall subconformlet (place val)))))))
    #+END_SRC
    
    It uses a special hidden ~<input>~ which stores the last time the form was rendered. This must
    be persisted somewhere, and the persistence location passed as ~mtime-place~. If the form is
    submitted, and the stored render time is not the same as the persisted one, it means that the
    ~val~ may have been modified since the form was rendered, and the form should not be safely
    processed. You may want to throw a custom condition instead of just calling ~assert~ so that you
    can catch it and display an appropriate page to the user. It's necessary to perform a non-local
    jump, because there is no other way to "abort" the pending event handlers.
** Other important stuff
*** Built-in Fields
    Read the function documentation strings for the built-in fields to learn about them.
*** Side effects
    The body of a ~conformlet~ form mustn't cause side effects. It's alright to
    have side effects in event handlers, though.
*** Order
    Sub-conformlet event handlers are ordered according to the ~:order~ parameter passed to their
    ~conformlet~ statements. ~custom-event~ statements are executed after all sub-conformlet event
    handlers. All built-in conformlets except for buttons have an order of 0. Buttons have an order
    of 1, because buttons submit the form and thus a button press is the last thing that happens
    before form submission. If multiple event handlers have the same order (very common, because
    all non-button conformlets have an order of zero), their event handlers are executed in the
    order the conformlets were instantiated during the render phase.

    Order is "local" to the current ~conformlet~ statement. Eg, if you have the following structure:
    + A: Top-level
      + B: ~:order 2~
        + C: ~:order 599~
      + D: ~:order 5~
    Conformlet D's event handlers will be executed /after/ conformlet C's.
