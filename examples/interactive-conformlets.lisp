(in-package #:conform/examples)

(defun delete-item-at (list index)
  (declare (list list)
           (integer index))
  (if (zerop index)
      (cdr list)
      (let ((prevcdr (nthcdr (1- index) list)))
        (rplacd prevcdr (cddr prevcdr))
        list)))

(defun swapcar (cons1 cons2)
  (declare (cons cons1 cons2))
  (let ((temp (car cons1)))
    (rplaca cons1 (car cons2))
    (rplaca cons2 temp)))

(defun advanced-list (subconformlet default)
  (conformlet (:val val)
    `(div (class "list-wrapper")
          ,(loop
              for i from 0 below (length val)
              collect `(div (class "list-item")
                            ,(conform subconformlet (nth i val))
                            ,(conform (button-input "Delete")
                                      :onclick (lambda ()
                                                 (delete-item-at val i)))
                            ,(when (> i 0)
                               (conform (button-input "Move up")
                                        :onclick (lambda ()
                                                   (swapcar (nthcdr (1- i) val)
                                                            (nthcdr i val)))))
                            ,(when (< i (length val))
                               (conform (button-input "Move down")
                                        :onclick (lambda ()
                                                   (swapcar (nthcdr i val)
                                                            (nthcdr (1+ i) val)))))))
          ,(conform (button-input "Add new")
                    :onclick (lambda ()
                               (push default val)))
          ,(conform (button-input "Shuffle")
                    :onclick (lambda ()
                               (setf val (shuffle val))))
          ,(conform (button-input "Thanos")
                    :onclick (lambda ()
                               (setf val (nthcdr (ceiling (length val) 2) (shuffle val))))))))
